{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n// 'use strict';\nconst $a5fd07fa01589658$var$INITIAL_SCORE = 0;\nconst $a5fd07fa01589658$var$INITIAL_STATE = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $a5fd07fa01589658$var$STATUS_IDLE = 'idle';\nconst $a5fd07fa01589658$var$STATUS_PLAYING = 'playing';\nconst $a5fd07fa01589658$var$STATUS_WIN = 'win';\nconst $a5fd07fa01589658$var$STATUS_LOSE = 'lose';\nconst $a5fd07fa01589658$var$FOUR_PROBABILITY = 0.1;\nfunction $a5fd07fa01589658$var$cloneState(state) {\n    return state.map((arr)=>[\n            ...arr\n        ]);\n}\nfunction $a5fd07fa01589658$var$normalize(value) {\n    if (value > 0) return 1;\n    if (value < 0) return -1;\n    return 0;\n}\nfunction $a5fd07fa01589658$var$getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ class $a5fd07fa01589658$var$Game {\n    /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */ constructor(initialState = $a5fd07fa01589658$var$INITIAL_STATE){\n        this.initialState = $a5fd07fa01589658$var$cloneState(initialState);\n        this.state = initialState;\n        this.score = $a5fd07fa01589658$var$INITIAL_SCORE;\n        this.status = $a5fd07fa01589658$var$STATUS_IDLE;\n    }\n    #checkGameBoard() {\n        let hasAvailableMoves = false;\n        for(let row = 0; row < this.state.length; row++)for(let column = 0; column < this.state[row].length; column++){\n            if (this.state[row][column] === 2048) {\n                this.status = $a5fd07fa01589658$var$STATUS_WIN;\n                return;\n            }\n            if (this.state[row + 1] && this.state[row][column] === this.state[row + 1][column] || this.state[row][column + 1] && this.state[row][column] === this.state[row][column + 1]) hasAvailableMoves = true;\n        }\n        if (!hasAvailableMoves) this.status = $a5fd07fa01589658$var$STATUS_LOSE;\n    }\n    #getEmptyCells() {\n        const emptyCells = [];\n        for(let row = 0; row < this.state.length; row++)for(let column = 0; column < this.state[row].length; column++){\n            const cellValue = this.state[row][column];\n            if (cellValue === 0) emptyCells.push([\n                row,\n                column\n            ]);\n        }\n        return emptyCells;\n    }\n    #randomSpawn() {\n        const emptyCells = this.#getEmptyCells();\n        const randomEmptyCell = emptyCells[$a5fd07fa01589658$var$getRandomInt(emptyCells.length)];\n        this.state[randomEmptyCell[0]][randomEmptyCell[1]] = Math.random() <= $a5fd07fa01589658$var$FOUR_PROBABILITY ? 4 : 2;\n    }\n    #moveColumnWithOffset(offset) {\n        const columnStart = offset > 0 ? 0 : this.state.length - 1;\n        const columnStep = $a5fd07fa01589658$var$normalize(offset);\n        for(let row = 0; row < this.state.length; row++){\n            const currentRow = this.state[row];\n            for(let column = columnStart; column < currentRow.length && column >= 0; column += columnStep){\n                const shouldNotAdd = new Array(currentRow[column].length).fill(false);\n                const nextColumnStart = offset > 0 ? column + 1 : column - 1;\n                for(let column2 = nextColumnStart; column2 < currentRow.length && column2 >= 0; column2 += columnStep){\n                    if (currentRow[column] === 0 && currentRow[column2] !== 0) {\n                        currentRow[column] = currentRow[column2];\n                        currentRow[column2] = 0;\n                        continue;\n                    }\n                    if (currentRow[column] !== 0 && currentRow[column] === currentRow[column2] && !shouldNotAdd[row]) {\n                        currentRow[column] += currentRow[column2];\n                        shouldNotAdd[row] = true;\n                        this.score += currentRow[column];\n                        currentRow[column2] = 0;\n                    }\n                    if (currentRow[column] !== 0 && currentRow[column2] !== 0 && currentRow[column] !== currentRow[column2]) shouldNotAdd[row] = true;\n                }\n            }\n        }\n    }\n    #moveRowWithOffset(offset) {\n        const rowStart = offset > 0 ? 0 : this.state.length - 1;\n        const rowStep = $a5fd07fa01589658$var$normalize(offset);\n        for(let row = rowStart; row < this.state.length && row >= 0; row += rowStep){\n            const shouldNotAdd = new Array(this.state[row].length).fill(false);\n            const currentRow = this.state[row];\n            const nextRowStart = offset > 0 ? row + 1 : row - 1;\n            for(let row2 = nextRowStart; row2 < this.state.length && row2 >= 0; row2 += rowStep){\n                const nextRow = this.state[row2];\n                for(let column = 0; column < currentRow.length; column++){\n                    if (currentRow[column] === 0 && nextRow[column] !== 0) {\n                        currentRow[column] = nextRow[column];\n                        nextRow[column] = 0;\n                        continue;\n                    }\n                    if (currentRow[column] !== 0 && currentRow[column] === nextRow[column] && !shouldNotAdd[column]) {\n                        currentRow[column] += nextRow[column];\n                        shouldNotAdd[column] = true;\n                        this.score += currentRow[column];\n                        nextRow[column] = 0;\n                        continue;\n                    }\n                    if (currentRow[column] !== 0 && nextRow[column] !== 0 && currentRow[column] !== nextRow[column]) shouldNotAdd[column] = true;\n                }\n            }\n        }\n    }\n    #moveWithOffset(offsetColumn, offsetRow = 0) {\n        if (this.status !== 'playing' && this.status !== 'idle') return;\n        const lastState = this.state.toString();\n        if (offsetRow) this.#moveRowWithOffset(offsetRow);\n        else this.#moveColumnWithOffset(offsetColumn);\n        this.#checkGameBoard();\n        if (lastState === this.state.toString()) return;\n        this.#randomSpawn();\n    }\n    moveLeft() {\n        this.#moveWithOffset(1);\n    }\n    moveRight() {\n        this.#moveWithOffset(-1);\n    }\n    moveUp() {\n        this.#moveWithOffset(0, 1);\n    }\n    moveDown() {\n        this.#moveWithOffset(0, -1);\n    }\n    /**\r\n   * @returns {number}\r\n   */ getScore() {\n        return this.score;\n    }\n    /**\r\n   * @returns {number[][]}\r\n   */ getState() {\n        return this.state;\n    }\n    /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */ getStatus() {\n        return this.status;\n    }\n    /**\r\n   * Starts the game.\r\n   */ start() {\n        this.restart();\n    }\n    /**\r\n   * Resets the game.\r\n   */ restart() {\n        this.status = $a5fd07fa01589658$var$STATUS_PLAYING;\n        this.state = $a5fd07fa01589658$var$cloneState(this.initialState);\n        this.score = $a5fd07fa01589658$var$INITIAL_SCORE;\n        this.#randomSpawn();\n        this.#randomSpawn();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$rows = document.querySelectorAll('.field-row');\nconst $09e991522ca7e64e$var$button = document.querySelector('.button');\nconst $09e991522ca7e64e$var$gameScore = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$messageStart = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$messageWin = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$BUTTON_RESTART = 'Restart';\nconst $09e991522ca7e64e$var$BUTTON_CLASS_RESTART = 'restart';\nconst $09e991522ca7e64e$var$BUTTON_START = 'Start';\nconst $09e991522ca7e64e$var$BUTTON_CLASS_START = 'start';\nlet $09e991522ca7e64e$var$showStartButton = true;\nfunction $09e991522ca7e64e$var$update() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < state.length; row++)for(let column = 0; column < state[row].length; column++){\n        const value = state[row][column];\n        if (value < 2 || value % 2 !== 0) {\n            $09e991522ca7e64e$var$rows[row].children[column].replaceChildren();\n            continue;\n        }\n        const newCell = document.createElement('div');\n        newCell.textContent = value;\n        newCell.classList.add('field-cell', `field-cell--${value}`);\n        $09e991522ca7e64e$var$rows[row].children[column].replaceChildren(newCell);\n    }\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case 'playing':\n            $09e991522ca7e64e$var$button.textContent = $09e991522ca7e64e$var$BUTTON_RESTART;\n            $09e991522ca7e64e$var$button.classList.remove($09e991522ca7e64e$var$BUTTON_CLASS_START);\n            $09e991522ca7e64e$var$button.classList.add($09e991522ca7e64e$var$BUTTON_CLASS_RESTART);\n            $09e991522ca7e64e$var$messageStart.classList.add('hidden');\n            $09e991522ca7e64e$var$messageWin.classList.add('hidden');\n            $09e991522ca7e64e$var$messageLose.classList.add('hidden');\n            break;\n        case 'lose':\n            $09e991522ca7e64e$var$messageLose.classList.remove('hidden');\n            break;\n        case 'win':\n            $09e991522ca7e64e$var$messageWin.classList.remove('hidden');\n            break;\n        default:\n            break;\n    }\n    if ($09e991522ca7e64e$var$showStartButton) {\n        $09e991522ca7e64e$var$button.textContent = $09e991522ca7e64e$var$BUTTON_START;\n        $09e991522ca7e64e$var$button.classList.remove($09e991522ca7e64e$var$BUTTON_CLASS_RESTART);\n        $09e991522ca7e64e$var$button.classList.add($09e991522ca7e64e$var$BUTTON_CLASS_START);\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n$09e991522ca7e64e$var$button.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing' && !$09e991522ca7e64e$var$showStartButton && confirm('Are you sure you want to restart the game?')) $09e991522ca7e64e$var$game.restart();\n    else if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$update();\n});\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    let pressedArrows = true;\n    switch(e.key){\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            pressedArrows = false;\n    }\n    if (pressedArrows) {\n        $09e991522ca7e64e$var$showStartButton = false;\n        $09e991522ca7e64e$var$update();\n    }\n});\ndocument.addEventListener('touchstart', $09e991522ca7e64e$var$handleTouchStart, false);\ndocument.addEventListener('touchmove', $09e991522ca7e64e$var$handleTouchMove, false);\nlet $09e991522ca7e64e$var$xDown = null;\nlet $09e991522ca7e64e$var$yDown = null;\nfunction $09e991522ca7e64e$var$getTouches(evt) {\n    return evt.touches || // browser API\n    evt.originalEvent.touches; // jQuery\n}\nfunction $09e991522ca7e64e$var$handleTouchStart(evt) {\n    const firstTouch = $09e991522ca7e64e$var$getTouches(evt)[0];\n    $09e991522ca7e64e$var$xDown = firstTouch.clientX;\n    $09e991522ca7e64e$var$yDown = firstTouch.clientY;\n}\nfunction $09e991522ca7e64e$var$handleTouchMove(evt) {\n    if (!$09e991522ca7e64e$var$xDown || !$09e991522ca7e64e$var$yDown) return;\n    const xUp = evt.touches[0].clientX;\n    const yUp = evt.touches[0].clientY;\n    const xDiff = $09e991522ca7e64e$var$xDown - xUp;\n    const yDiff = $09e991522ca7e64e$var$yDown - yUp;\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff > 0) $09e991522ca7e64e$var$game.moveLeft();\n        else $09e991522ca7e64e$var$game.moveRight();\n    } else if (yDiff > 0) $09e991522ca7e64e$var$game.moveUp();\n    else $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$update();\n    $09e991522ca7e64e$var$xDown = null;\n    $09e991522ca7e64e$var$yDown = null;\n}\n\n\n//# sourceMappingURL=index.8b76a1ab.js.map\n","'use strict';\r\n\r\nconst Game = require('../modules/Game.class');\r\nconst game = new Game();\r\n\r\nconst rows = document.querySelectorAll('.field-row');\r\nconst button = document.querySelector('.button');\r\nconst gameScore = document.querySelector('.game-score');\r\n\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageWin = document.querySelector('.message-win');\r\nconst messageLose = document.querySelector('.message-lose');\r\n\r\nconst BUTTON_RESTART = 'Restart';\r\nconst BUTTON_CLASS_RESTART = 'restart';\r\nconst BUTTON_START = 'Start';\r\nconst BUTTON_CLASS_START = 'start';\r\n\r\nlet showStartButton = true;\r\n\r\nfunction update() {\r\n  const state = game.getState();\r\n\r\n  for (let row = 0; row < state.length; row++) {\r\n    for (let column = 0; column < state[row].length; column++) {\r\n      const value = state[row][column];\r\n\r\n      if (value < 2 || value % 2 !== 0) {\r\n        rows[row].children[column].replaceChildren();\r\n        continue;\r\n      }\r\n\r\n      const newCell = document.createElement('div');\r\n\r\n      newCell.textContent = value;\r\n      newCell.classList.add('field-cell', `field-cell--${value}`);\r\n\r\n      rows[row].children[column].replaceChildren(newCell);\r\n    }\r\n  }\r\n\r\n  switch (game.getStatus()) {\r\n    case 'playing':\r\n      button.textContent = BUTTON_RESTART;\r\n      button.classList.remove(BUTTON_CLASS_START);\r\n      button.classList.add(BUTTON_CLASS_RESTART);\r\n\r\n      messageStart.classList.add('hidden');\r\n      messageWin.classList.add('hidden');\r\n      messageLose.classList.add('hidden');\r\n\r\n      break;\r\n    case 'lose':\r\n      messageLose.classList.remove('hidden');\r\n\r\n      break;\r\n    case 'win':\r\n      messageWin.classList.remove('hidden');\r\n\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  if (showStartButton) {\r\n    button.textContent = BUTTON_START;\r\n    button.classList.remove(BUTTON_CLASS_RESTART);\r\n    button.classList.add(BUTTON_CLASS_START);\r\n  }\r\n\r\n  gameScore.textContent = game.getScore();\r\n}\r\n\r\nbutton.addEventListener('click', () => {\r\n  if (\r\n    game.getStatus() === 'playing' &&\r\n    !showStartButton &&\r\n    confirm('Are you sure you want to restart the game?')\r\n  ) {\r\n    game.restart();\r\n  } else if (game.getStatus() !== 'playing') {\r\n    game.start();\r\n  }\r\n\r\n  update();\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (game.getStatus() !== 'playing') {\r\n    return;\r\n  }\r\n\r\n  let pressedArrows = true;\r\n\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n      game.moveUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      game.moveDown();\r\n      break;\r\n    case 'ArrowLeft':\r\n      game.moveLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      game.moveRight();\r\n      break;\r\n    default:\r\n      pressedArrows = false;\r\n  }\r\n\r\n  if (pressedArrows) {\r\n    showStartButton = false;\r\n    update();\r\n  }\r\n});\r\n\r\ndocument.addEventListener('touchstart', handleTouchStart, false);\r\ndocument.addEventListener('touchmove', handleTouchMove, false);\r\n\r\nlet xDown = null;\r\nlet yDown = null;\r\n\r\nfunction getTouches(evt) {\r\n  return (\r\n    evt.touches || // browser API\r\n    evt.originalEvent.touches\r\n  ); // jQuery\r\n}\r\n\r\nfunction handleTouchStart(evt) {\r\n  const firstTouch = getTouches(evt)[0];\r\n\r\n  xDown = firstTouch.clientX;\r\n  yDown = firstTouch.clientY;\r\n}\r\n\r\nfunction handleTouchMove(evt) {\r\n  if (!xDown || !yDown) {\r\n    return;\r\n  }\r\n\r\n  const xUp = evt.touches[0].clientX;\r\n  const yUp = evt.touches[0].clientY;\r\n\r\n  const xDiff = xDown - xUp;\r\n  const yDiff = yDown - yUp;\r\n\r\n  if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n    if (xDiff > 0) {\r\n      game.moveLeft();\r\n    } else {\r\n      game.moveRight();\r\n    }\r\n  } else {\r\n    if (yDiff > 0) {\r\n      game.moveUp();\r\n    } else {\r\n      game.moveDown();\r\n    }\r\n  }\r\n\r\n  update();\r\n\r\n  xDown = null;\r\n  yDown = null;\r\n}\r\n","// 'use strict';\r\n\r\nconst INITIAL_SCORE = 0;\r\nconst INITIAL_STATE = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nconst STATUS_IDLE = 'idle';\r\nconst STATUS_PLAYING = 'playing';\r\nconst STATUS_WIN = 'win';\r\nconst STATUS_LOSE = 'lose';\r\n\r\nconst FOUR_PROBABILITY = 0.1;\r\n\r\nfunction cloneState(state) {\r\n  return state.map((arr) => [...arr]);\r\n}\r\n\r\nfunction normalize(value) {\r\n  if (value > 0) {\r\n    return 1;\r\n  }\r\n\r\n  if (value < 0) {\r\n    return -1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */\r\n\r\n  constructor(initialState = INITIAL_STATE) {\r\n    this.initialState = cloneState(initialState);\r\n\r\n    this.state = initialState;\r\n    this.score = INITIAL_SCORE;\r\n    this.status = STATUS_IDLE;\r\n  }\r\n\r\n  #checkGameBoard() {\r\n    let hasAvailableMoves = false;\r\n\r\n    for (let row = 0; row < this.state.length; row++) {\r\n      for (let column = 0; column < this.state[row].length; column++) {\r\n        if (this.state[row][column] === 2048) {\r\n          this.status = STATUS_WIN;\r\n\r\n          return;\r\n        }\r\n\r\n        if (\r\n          (this.state[row + 1] &&\r\n            this.state[row][column] === this.state[row + 1][column]) ||\r\n          (this.state[row][column + 1] &&\r\n            this.state[row][column] === this.state[row][column + 1])\r\n        ) {\r\n          hasAvailableMoves = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!hasAvailableMoves) {\r\n      this.status = STATUS_LOSE;\r\n    }\r\n  }\r\n\r\n  #getEmptyCells() {\r\n    const emptyCells = [];\r\n\r\n    for (let row = 0; row < this.state.length; row++) {\r\n      for (let column = 0; column < this.state[row].length; column++) {\r\n        const cellValue = this.state[row][column];\r\n\r\n        if (cellValue === 0) {\r\n          emptyCells.push([row, column]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return emptyCells;\r\n  }\r\n\r\n  #randomSpawn() {\r\n    const emptyCells = this.#getEmptyCells();\r\n\r\n    const randomEmptyCell = emptyCells[getRandomInt(emptyCells.length)];\r\n\r\n    this.state[randomEmptyCell[0]][randomEmptyCell[1]] =\r\n      Math.random() <= FOUR_PROBABILITY ? 4 : 2;\r\n  }\r\n\r\n  #moveColumnWithOffset(offset) {\r\n    const columnStart = offset > 0 ? 0 : this.state.length - 1;\r\n    const columnStep = normalize(offset);\r\n\r\n    for (let row = 0; row < this.state.length; row++) {\r\n      const currentRow = this.state[row];\r\n\r\n      for (\r\n        let column = columnStart;\r\n        column < currentRow.length && column >= 0;\r\n        column += columnStep\r\n      ) {\r\n        const shouldNotAdd = new Array(currentRow[column].length).fill(false);\r\n        const nextColumnStart = offset > 0 ? column + 1 : column - 1;\r\n\r\n        for (\r\n          let column2 = nextColumnStart;\r\n          column2 < currentRow.length && column2 >= 0;\r\n          column2 += columnStep\r\n        ) {\r\n          if (currentRow[column] === 0 && currentRow[column2] !== 0) {\r\n            currentRow[column] = currentRow[column2];\r\n            currentRow[column2] = 0;\r\n\r\n            continue;\r\n          }\r\n\r\n          if (\r\n            currentRow[column] !== 0 &&\r\n            currentRow[column] === currentRow[column2] &&\r\n            !shouldNotAdd[row]\r\n          ) {\r\n            currentRow[column] += currentRow[column2];\r\n            shouldNotAdd[row] = true;\r\n            this.score += currentRow[column];\r\n\r\n            currentRow[column2] = 0;\r\n          }\r\n\r\n          if (\r\n            currentRow[column] !== 0 &&\r\n            currentRow[column2] !== 0 &&\r\n            currentRow[column] !== currentRow[column2]\r\n          ) {\r\n            shouldNotAdd[row] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  #moveRowWithOffset(offset) {\r\n    const rowStart = offset > 0 ? 0 : this.state.length - 1;\r\n    const rowStep = normalize(offset);\r\n\r\n    for (\r\n      let row = rowStart;\r\n      row < this.state.length && row >= 0;\r\n      row += rowStep\r\n    ) {\r\n      const shouldNotAdd = new Array(this.state[row].length).fill(false);\r\n      const currentRow = this.state[row];\r\n\r\n      const nextRowStart = offset > 0 ? row + 1 : row - 1;\r\n\r\n      for (\r\n        let row2 = nextRowStart;\r\n        row2 < this.state.length && row2 >= 0;\r\n        row2 += rowStep\r\n      ) {\r\n        const nextRow = this.state[row2];\r\n\r\n        for (let column = 0; column < currentRow.length; column++) {\r\n          if (currentRow[column] === 0 && nextRow[column] !== 0) {\r\n            currentRow[column] = nextRow[column];\r\n            nextRow[column] = 0;\r\n\r\n            continue;\r\n          }\r\n\r\n          if (\r\n            currentRow[column] !== 0 &&\r\n            currentRow[column] === nextRow[column] &&\r\n            !shouldNotAdd[column]\r\n          ) {\r\n            currentRow[column] += nextRow[column];\r\n            shouldNotAdd[column] = true;\r\n\r\n            this.score += currentRow[column];\r\n\r\n            nextRow[column] = 0;\r\n            continue;\r\n          }\r\n\r\n          if (\r\n            currentRow[column] !== 0 &&\r\n            nextRow[column] !== 0 &&\r\n            currentRow[column] !== nextRow[column]\r\n          ) {\r\n            shouldNotAdd[column] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  #moveWithOffset(offsetColumn, offsetRow = 0) {\r\n    if (this.status !== 'playing' && this.status !== 'idle') {\r\n      return;\r\n    }\r\n\r\n    const lastState = this.state.toString();\r\n\r\n    if (offsetRow) {\r\n      this.#moveRowWithOffset(offsetRow);\r\n    } else {\r\n      this.#moveColumnWithOffset(offsetColumn);\r\n    }\r\n\r\n    this.#checkGameBoard();\r\n\r\n    if (lastState === this.state.toString()) {\r\n      return;\r\n    }\r\n\r\n    this.#randomSpawn();\r\n  }\r\n\r\n  moveLeft() {\r\n    this.#moveWithOffset(1);\r\n  }\r\n  moveRight() {\r\n    this.#moveWithOffset(-1);\r\n  }\r\n  moveUp() {\r\n    this.#moveWithOffset(0, 1);\r\n  }\r\n  moveDown() {\r\n    this.#moveWithOffset(0, -1);\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  /**\r\n   * @returns {number[][]}\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  /**\r\n   * Starts the game.\r\n   */\r\n  start() {\r\n    this.restart();\r\n  }\r\n\r\n  /**\r\n   * Resets the game.\r\n   */\r\n  restart() {\r\n    this.status = STATUS_PLAYING;\r\n    this.state = cloneState(this.initialState);\r\n    this.score = INITIAL_SCORE;\r\n\r\n    this.#randomSpawn();\r\n    this.#randomSpawn();\r\n  }\r\n\r\n  // Add your own methods here\r\n}\r\n\r\nmodule.exports = Game;\r\n"],"names":["$a5fd07fa01589658$var$INITIAL_STATE","$a5fd07fa01589658$var$cloneState","state","map","arr","$a5fd07fa01589658$var$normalize","value","$09e991522ca7e64e$var$game","constructor","initialState","score","status","hasAvailableMoves","row","length","column","emptyCells","push","randomEmptyCell","Math","floor","random","offset","columnStart","columnStep","currentRow","shouldNotAdd","Array","fill","nextColumnStart","column2","rowStart","rowStep","nextRowStart","row2","nextRow","offsetColumn","offsetRow","lastState","toString","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$rows","document","querySelectorAll","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$BUTTON_CLASS_RESTART","$09e991522ca7e64e$var$BUTTON_CLASS_START","$09e991522ca7e64e$var$showStartButton","$09e991522ca7e64e$var$update","children","replaceChildren","newCell","createElement","textContent","classList","add","remove","addEventListener","confirm","e","pressedArrows","key","evt","firstTouch","$09e991522ca7e64e$var$getTouches","touches","originalEvent","$09e991522ca7e64e$var$xDown","clientX","$09e991522ca7e64e$var$yDown","clientY","xUp","yUp","xDiff","yDiff","abs"],"version":3,"file":"index.8b76a1ab.js.map"}